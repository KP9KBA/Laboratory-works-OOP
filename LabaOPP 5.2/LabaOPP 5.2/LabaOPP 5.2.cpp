#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;

//number 7/10
class angle {
private:
	float min;
	int grad;
	char napr;
public:

	char a = '\xF8';
	angle() : min(0), grad(0), napr(0) {}
	angle(int g, float m, char n) : grad(g), min(m), napr(n)
	{}
	void getAngle() {
		cin >> grad >> min >> napr;
	}
	void putAngle()const {
		cout << grad << "°" << min << "'" << napr;
	}
};
//number 8
class Number {
private:
	int num;
	static int vsego;
public:
	void putNumber() {
		vsego++;
		num = vsego;
		cout << num << endl;
	}
};
int Number::vsego = 0;
//number 9
class fraction {
private:
	int n1, n2;
public:
	char a = '/';
	void getFrac() {
		cout << "Введите числитель/знаменатель дроби: ";
		cin >> n1 >> a >> n2;
	}
	void putFrac() {
		cout << "Вывод дроби " << n1 << a << n2 << endl;
	}
	void sumFrac(fraction, fraction);
};
void fraction::sumFrac(fraction a, fraction b) {
	n1 = a.n1 * b.n2 + b.n1 * a.n2;//числитель
	n2 = (a.n2 * b.n2);//знаменатель
}
//number 10
class ship {
private:
	angle shir, dol;
	int num;
	static int vsego;
public:
	ship() {
		vsego++;
		num = vsego;
	}
	void getShip();
	void putShip()const;
};
int ship::vsego = 0;
void ship::getShip() {
	cout << "\nВведите градусы, минуты и направление (N, S, Е или W) широты: ";
	shir.getAngle();
	cout << "\nВведите градусы, минуты и направление (N, S, Е или W) долготы: ";
	dol.getAngle();
}
void ship::putShip()const {
	cout << "\n-Данные корабля-\nНомер: " << num << endl;
	cout << "Координаты\nШирота: "; shir.putAngle();
	cout << "\nДолгота:"; dol.putAngle();
}
//number 11
class fraction2 {
private:
	int n1, n2;
public:
	char a = '/';
	void getFrac() {
		cout << "Введите числитель/знаменатель дроби: ";
		cin >> n1 >> a >> n2;
	}
	void putFrac() {
		cout << "Вывод дроби " << n1 << a << n2 << endl;
	}
	void fAdd(fraction2, fraction2);//сумма
	void fSub(fraction2, fraction2);//разность
	void fMul(fraction2, fraction2);//умножение
	void fDiv(fraction2, fraction2);//деление
	void lowterms();//сокращение дроби
};
void fraction2::fAdd(fraction2 a, fraction2 b) {
	n1 = a.n1 * b.n2 + b.n1 * a.n2;//числитель
	n2 = (a.n2 * b.n2);//знаменатель
}
void fraction2::fSub(fraction2 a, fraction2 b) {
	n1 = (a.n1 * b.n2 - b.n1 * a.n2);
	n2 = (a.n2 * b.n2);
}
void fraction2::fMul(fraction2 a, fraction2 b) {
	n1 = (a.n1 * b.n1);
	n2 = (a.n2 * b.n2);
}
void fraction2::fDiv(fraction2 a, fraction2 b) {
	n1 = (a.n1 * b.n2);
	n2 = (a.n2 * b.n1);
}
void fraction2::lowterms() //Сокращение дроби
{
	long tchis, tznam, temp, nod;
	tchis = labs(n1); // Используем неотрицательные значения | labs - вычисляет абсолютную величину значения, 
	//передаваемого в качестве аргумента через параметр n.
	tznam = labs(n2); // Нужен cmath
	if (tznam == 0) { // Проверка знаменателя 
		cout << "Недопустимый знаменатель"; exit(1); // exit - завершает работу программы
	}
	else if (tchis == 0) {
		n1 = 0;
		n2 = 1;
		return;
	}
	// Нахождение наибольшего общего делителя 
	while (tchis != 0) {
		if (tchis < tznam) { // Если числитель больше знаменателя, меняем их местами.
			temp = tchis;
			tchis = tznam;
			tznam = temp;
		}
		tchis = tchis - tznam;
	}
	nod = tznam;// Делим числитель и знаменатель на НОД.
	n1 = n1 / nod;
	n2 = n2 / nod;
}
//number 12


int main() {
	setlocale(LC_ALL, "Russian");
	int a;
	cout << "Введите номер лабораторной работы 6: "; cin >> a;
	switch (a) {
	case 7: {
		/*В морской навигации координаты точки измеряются в градусах и минутах широты и долготы.
		Например, координаты бухты Панити на о. Таити равны 149 градусов 34.8 минут восточной долготы
		и 17 градусов 31.5 минут южной широты. Это записывается как 149°34.8' W, 17°31.5' S.
		Один градус равен 60 минутам (устаревшая система также делила одну минуту на 60 секунд,
		но сейчас минуту делят на обычные десятичные доли). Долгота измеряется величиной от 0 до
		180 градусов восточнее или западнее Гринвича. Широта принимает значения от 0 до 90 градусов
		севернее или южнее экватора.
		Создайте класс angle, включающий следующие три поля: типа int для числа градусов, типа float
		для числа минут и типа char для указания направления (N, S, Е или W). Объект этого класса
		может содержать значение как широты, так и долготы.
		Создайте метод, позволяющий ввести координату точки,
		направление, в котором она измеряется, и метод, выводящий на экран значение этой координаты,
		например 179°59.9' Е. Кроме того, напишите конструктор, принимающий три аргумента.
		Напишите функцию main, которая сначала создает переменную с помощью трехаргументного конструктора и
		выводит ее значение на экран, а затем циклически запрашивает пользователя ввести значение координаты и
		отображает введенное значение на экране. Для вывода символа градусов (°) можно воспользоваться
		символьной константой '\xF8'.*/
		char ans = ' ';
		angle point(149, 34.8, 'W');
		cout << " точка - ";  point.putAngle();
		do {
			cout << "\nВведите градусы, минуты и направление (N, S, Е или W): ";
			point.getAngle();
			cout << "\nвывод: ";
			point.putAngle();
			cout << "\nХотите продолжить? (y or n): ";
			//ans = std::getch();
			cout << ans;
			//cin >> ans;
			//_getch();
		} while (ans != 'n');
		system("pause");
	}break;
	case 9: {
		/*9.На основе структуры fraction из упражнения 8 главы 4 создайте класс fraction.
		Данные класса должны быть представлены двумя полями: числителем и знаменателем.
		Методы класса должны получать от пользователя значения числителя и знаменателя дроби
		в форме 3/5 и выводить значение дроби в этом же формате. Кроме того, должен быть разработан метод,
		складывающий значения двух дробей. Напишите функцию main(), которая циклически запрашивает
		у пользователя ввод пары дробей, затем складывает их и выводит результат на экран.
		После каждой такой операции программа должна спрашивать пользователя, следует ли продолжать цикл.*/
		char yn = ' ';
		fraction d1, d2, d3;
		do {
			d1.getFrac();
			d2.getFrac();
			d3.sumFrac(d1, d2);
			d3.putFrac();
			cout << "Желаете продолжить? (y/n)  ";
			cin >> yn;
		} while (yn != 'n');
	}break;
	case 10: {
		/*10.Создайте класс с именем ship, который будет содержать данные об учетном номере корабля
		и координатах его расположения. Для задания номера корабля следует использовать механизм,
		аналогичный описанному в упражнении 8. Для хранения координат используйте два поля типа angle
		(см. упражнение 7).
		Разработайте метод, который будет сохранять в объекте данные о корабле,
		вводимые пользователем, и метод, выводящий данные о корабле на экран. Напишите функцию main(),
		создающую три объекта класса ship, затем запрашивающую ввод пользователем информации о каждом
		из кораблей и выводящую на экран всю полученную информацию.*/
		ship s1, s2, s3;
		s1.getShip();
		s2.getShip();
		s3.getShip();
		s1.putShip();
		s2.putShip();
		s3.putShip();

	}break;
	case 11: {
		/*11.Модифицируйте калькулятор, созданный в упражнении 12 главы 4 так, чтобы вместо структуры
		fraction использовался одноименный класс. Класс должен содержать методы для ввода и вывода данных
		объектов, а также для выполнения арифметических операций. Кроме того, необходимо включить в состав
		класса функцию, приводящую дробь к несократимому виду. Функция должна находить наибольший общий
		делитель числителя и знаменателя и делить числитель и знаменатель на это значение. Код функции,
		названной lowterms(), приведен ниже:*/
		
		/*Можно вызывать данную функцию в конце каждого метода, выполняющего арифметическую операцию,
		либо непосредственно перед выводом на экран результата. Кроме перечисленных методов, вы можете
		включить в класс конструктор с двумя аргументами, что также будет полезно.*/
		char oper, ch = ' ';
		fraction2 d1, d2, d3;
		do {
			d1.getFrac();
			d2.getFrac();
			cout << "Введите оператор (+, -, *, /): ";
			cin >> oper;
			switch (oper)
			{
			case '+': {
				d3.fAdd(d1,d2);
				d3.lowterms();
				d3.putFrac();
			} break;
			case '-': {
				d3.fSub(d1,d2);
				d3.lowterms();
				d3.putFrac();
			} break;
			case '*': {
				d3.fMul(d1,d2);
				d3.lowterms();
				d3.putFrac();
			} break;
			case '/': {
				d3.fDiv(d1,d2);
				d3.lowterms();
				d3.putFrac();
			} break;
			default: cout << "Введен неверный оператор";
			}
			cout << "Вы хотете продолжить? (да = y, нет = n) ";
			cin >> ch;
		} while (ch != 'n');

	}break;
	}
}
