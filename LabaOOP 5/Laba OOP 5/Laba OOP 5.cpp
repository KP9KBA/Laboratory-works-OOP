#include <iostream>
#include <conio.h>
using namespace std;

//number 1
class Int //(не то же самое, что int)
{
private:
	int i;
public:
	Int()                  //создание Int
	{
		i = 0;
	}
	Int(int ii)           //создание и инициализаци Int
	{
		i = ii;
	}
	void add(Int i2, Int i3) //складывает два значени 
							//типа Int
	{
		i = i2.i + i3.i;
	}
	void display()        //вывести Int
	{
		cout << i;
	}
};
//number 2
const char ESC = 27;//Код клавиши ESC
const double TOLL = 0.5;//пошлина равна 50 центами
class tollBooth {
private : 
	unsigned int  totalCars;
	double totalCash;
public:
	tollBooth() : totalCars(0), totalCash(0.0) {}//инициализация переменных
	void payingCar() { //метод
		totalCars++; //увеличиваем количество машин
		totalCash += TOLL; //увеличиваем деньги
	}
	void nорауСаr() { totalCars++; }//машины, которые не платят+
	void display() {
		cout << " \nMашины: " << totalCars  
			<< " Деньги: " << totalCash
			<< endl;//выводим значения
	}
};
//number 3
class Time {
private:
	int hrs, mins, secs;
public:
	Time() : hrs(0), mins(0), secs(0) {}
	Time(int h, int m, int s) : hrs(h), mins(m), secs(s) {}
	void display()const           //формат 11:59:59
	{
		cout << hrs << ":" << mins << ":" << secs;
	}
	void add_time(Time t1, Time t2)//сложить две переменные
	{
		secs = t1.secs + t2.secs;     //сложить секунды
		if (secs > 59)               //если перебор,
		{
			secs -= 60; mins++;
		}       //прибавить минуту
		mins += t1.mins + t2.mins;    //сложить минуты
		if (mins > 59)         //если слишком много минут,
		{
			mins -= 60; hrs++;
		}  //прибавить час
		hrs += t1.hrs + t2.hrs; //сложить часы
	}
};
//number 4
class employee {
private:
	int number;
	float posDollar;
	int mounth, day, year;
	enum etype { laborer, secretary, manager, accountant, executive, researcher };
	
public:
	void getInfo() {
		cout << "Введите номер работника и размер его пособия в долларах: ";
		cin >> number >> posDollar;
	}
	void getOut() {
		cout << endl << "Информация о сотрудниках\n";
		cout << "Сотрудник:\nНомер " << number << "\nРазмер пособия " << posDollar << " долларов" << endl;
	}
	
};
//number 5
class date {
private: 
	int mounth, day, year;
public:
	char a;
	void getDate() {
		cout << "Введите месяц/день/год: ";
		cin >> mounth >> a >> day >> a >> year;
	}
	void showDate() {
		cout << "Дата: ";
		if (mounth < 10) cout << "0" << mounth << a;
		else cout << mounth << a;
		if (day < 10) cout << "0" << day << a;
		else cout << day << a;
		if (year < 10) cout << "0" << year;
		else cout << year;
	}
};
//number 6
class Empoloyee {
private:
	int number;
	float posDollar;
	int mounth, day, year;
	enum etype { laborer, secretary, manager, accountant, executive, researcher };
public:
	char name;
	char a;
	void getEmployee() {//ввод данных
		cout << "Введите номер работника и размер его пособия в долларах: ";
		cin >> number >> posDollar;
		cout << "Введите месяц/день/год: ";
		cin >> mounth >> a >> day >> a >> year;
		cout << "Введите первую букву должности (laborer, secretary, manager, accountant, executive, researcher) : ";
		cin >> name;
		
		
	}
	void putEmployee() {//вывод
		cout << endl << "Информация о сотрудниках\n";
		cout << "Сотрудник:\nНомер " << number << "\nРазмер пособия " << posDollar << " долларов" << endl;
		cout << "Дата: ";
		if (mounth < 10) cout << "0" << mounth << a;
		else cout << mounth << a;
		if (day < 10) cout << "0" << day << a;
		else cout << day << a;
		if (year < 10) cout << "0" << year;
		else cout << year << endl;
		
		switch (name) {
		case 'l': {
			string etype[]{ "laborer" };
			cout << "Полное название должности: " << etype[0];
		}break;
		case 's': {
			string etype[]{ "secretary" };
			cout << "Полное название должности: " << etype[0];
		}break;
		case 'm': {
			string etype[]{ "manager" };
			cout << "Полное название должности: " << etype[0];
		}break;
		case 'a': {
			string etype[]{ "accountant" };
			cout << "Полное название должности: " << etype[0];
		}break;
		case 'e': {
			string etype[]{ "executive" };
			cout << "Полное название должности: " << etype[0];
		}break;
		case 'r': {
			string etype[]{ "researcher" };
			cout << "Полное название должности: " << etype[0];
		}break;
		}
	}
};
//number 7
class angle {
private:
	int min;
	float grad;
	char napr;
public: 
	
	char a = '\xF8';
	angle() : min(0), grad(0), napr(0) {}
	angle(int g, float m, char n) : grad(g), min(m), napr(n)
	{}
	void getAngle() {
		cin >> grad >> min >> napr;
	}
	void putAngle() {
		cout << grad << "°" << min << "'" << napr;
	}
};

int main() {
	setlocale(LC_ALL, "Russian");
	int a;
	cout << "Введите номер лабораторной работы 6: "; cin >> a;
	switch (a) {
	case 1: {
		/*Создайте класс Int, имитирующий стандартный тип int. Единственное поле этого класса должно иметь тип int. 
		Создайте методы, которые будут устанавливать значение поля, равным нулю, инициализировать его целым значением, 
		выводить значение поля на экран и складывать два значения типа Int.
Напишите программу, в которой будут созданы три объекта класса Int, два из которых будут инициализированы. 
Сложите два инициализированных объекта, присвойте результат третьему, а затем отобразите результат на экране.*/

		Int Int1(7);          //создать и инициализировать Int
		Int Int2(11);         //создать и инициализировать Int
		Int Int3;             //создать Int 
		Int3.add(Int1, Int2);  //сложение двух переменных типа Int
		cout << "\nInt3 ="; Int3.display(); //вывести результат
		cout << endl;
	}break;
	case 2: {
		/*Представьте пункт для взимания платежей за проезд по автостраде. 
		Каждая проезжающая машина должна заплатить за проезд 50 центов, однако часть машин платит за проезд, 
		а часть проезжает бесплатно. В кассе ведется учет числа проехавших машин и суммарная выручка от платы за проезд.
		Создайте модель такой кассы с помощью класса toLLBooth. Класс должен содержать два поля. 
		Одно из них, типа unsigned int, предназначено для учета количества проехавших автомобилей, 
		а второе, имеющее тип double, будет содержать суммарную выручку от оплаты проезда. 
		Конструктор должен инициализировать оба поля нулевыми значениями. Метод payingCar() инкрементирует число машин 
		и увеличивает на 0,50 суммарную выручку. Другой метод, nорауСаг(), увеличивает на единицу число автомобилей, 
		но оставляет без изменения выручку. Метод display() выводит оба значения на экран. Там, где это возможно, 
		сделайте методы константными.
		Создайте программу, которая продемонстрирует работу класса. Программа должна предложить
		пользователю нажать одну клавишу для того, чтобы сымитировать заплатившего автолюбителя, и 
		другую клавишу, чтобы сымитировать недобросовестного водителя. Нажатие клавиши Esc должно привести к 
		выдаче текущих значений количества машин и выручки и завершению программы.*/

		tollBooth booth1; //создает турникет
		char ch = ' ';
		cout << "\nНажмите 0 для машины без оплаты,"
			<< "\n1 для каждой оплачивающей машины,"
			<< "\nEsc для выхода.\n";
		do {
			ch = _getche();           //получить символ
			if (ch == '0 ')	        //если это 0, машина не оплачивала
				booth1.nорауСаr();
			if (ch == '1')          //если 1, машина оплачивала
			booth1.payingCar();
		} while (ch != ESC);      //выход из цикла по Esc
		booth1.display();         //вывод отчета
	}break;
	case 3: {
		/*Создайте класс с именем time, содержащий три поля типа int, предназначенные для хранения часов, минут и секунд. 
		Один из конструкторов класса должен инициализировать поля нулевыми значениями, а другой конструктор - 
		заданным набором значений. Создайте метод класса, который будет выводить значения полей на экран в формате 11:59:59, 
		и метод, складывающий значения двух объектов типа time, передаваемых в качестве аргументов.
В функции main() следует создать два инициализированных объекта (подумайте, должны ли они быть константными) 
и один неинициализированный объект. Затем сложите два инициализированных значения, а результат присвойте третьему 
объекту и выведите его значение на экран. Где возможно, сделайте методы константными */

		const Time time1(5, 59, 59);   //создание и инициализаци€
		const Time time2(4, 30, 30);   //двух переменных
		Time time3;//создать еще одну переменную
		time3.add_time(time1, time2); //сложить две переменные
		cout << "time3 ="; time3.display();//вывести результат
		cout << endl;
	}break;
	case 4: {
		/*Создайте класс employee, используя задачу 4 лабораторной работы 3. 
		Класс должен включать поле типа int для хранения номера сотрудника и поле типа float для 
		хранения величины его оклада. Методы класса должны позволять пользователю вводить и отображать данные класса. 
		Напишите функцию main(), которая запросит пользователя ввести данные для трех сотрудников и выведет 
		полученную информацию на экран.*/
		employee w1, w2, w3;
		w1.getInfo();
		w2.getInfo();
		w3.getInfo();
		w1.getOut();
		w2.getOut();
		w3.getOut();

		
	}break;
	case 5: {
		/*Взяв в качестве основы структуру из задачи 5 лабораторной работы 3, создайте класс date. 
		Его данные должны размещаться в трех полях типа int: month, day и year. Метод класса getdate() 
		должен принимать значение для объекта в формате 12/31/02, а метод showdate() - выводить данные на экран.*/
		date s1;
		s1.getDate();
		s1.showDate();
	}break;
	case 6: {
		/*Расширьте содержание класса employee из задачи 4, включив в него класс date и перечисление etype 
		(см. задачу 6 лабораторной работы 3). Объект класса date будет использоваться для хранения даты 
		приема сотрудника на работу. Перечисление будет использовано для хранения статуса сотрудника: 
		лаборант, секретарь, менеджер и т. д. Последние два поля данных должны быть закрытыми в определении 
		класса employee, как и номер и оклад сотрудника. Вам будет необходимо разработать методы getemploy() 
		и putemploy(), предназначенные соответственно для ввода и отображения информации о сотруднике. 
		Возможно, при создании методов вам понадобится ветвление switch для работы с перечисляемым типом etype. 
		Напишите функцию main(), которая попросит пользователя ввести данные о трех сотрудниках, а затем выведет 
		эти данные на экран.*/
		Empoloyee w1, w2, w3;
		cout << "---Первый сотрудник---" << endl;
		w1.getEmployee();
		cout << "---Второй сотрудник---" << endl;
		w2.getEmployee();
		cout << "---Третий сотрудник---" << endl;
		w3.getEmployee();
		w1.putEmployee();
		w2.putEmployee();
		w3.putEmployee();
		

	}break;
	case 7: {
		/*В морской навигации координаты точки измеряются в градусах и минутах широты и долготы. 
		Например, координаты бухты Панити на о. Таити равны 149 градусов 34.8 минут восточной долготы 
		и 17 градусов 31.5 минут южной широты. Это записывается как 149°34.8' W, 17°31.5' S. 
		Один градус равен 60 минутам (устаревшая система также делила одну минуту на 60 секунд, 
		но сейчас минуту делят на обычные десятичные доли). Долгота измеряется величиной от 0 до 
		180 градусов восточнее или западнее Гринвича. Широта принимает значения от 0 до 90 градусов 
		севернее или южнее экватора.
		Создайте класс angle, включающий следующие три поля: типа int для числа градусов, типа float 
		для числа минут и типа char для указания направления (N, S, Е или W). Объект этого класса 
		может содержать значение как широты, так и долготы. 
		Создайте метод, позволяющий ввести координату точки, 
		направление, в котором она измеряется, и метод, выводящий на экран значение этой координаты, 
		например 179°59.9' Е. Кроме того, напишите конструктор, принимающий три аргумента. 
		Напишите функцию main, которая сначала создает переменную с помощью трехаргументного конструктора и 
		выводит ее значение на экран, а затем циклически запрашивает пользователя ввести значение координаты и 
		отображает введенное значение на экране. Для вывода символа градусов (°) можно воспользоваться 
		символьной константой '\xF8'.*/
		char ans = 'y';
		angle point(149, 34.8, 'W');
		cout << " точка - ";  point.putAngle();
		do {
			cout << "\nВведите градусы, минуты и направление (N, S, Е или W): ";
			point.getAngle();
			cout << "\nвывод: ";
			point.putAngle();
			cout << "\nХотите продолжить? (y or n): ";
			ans = getch();
			//cin >> ans;
			//_getch();
		} while (ans != 'n');
		system("pause");

	}break;
	case 8: {
		/*8.Создайте класс, одно из полей которого хранит «порядковый номер» объекта, 
		то есть для первого созданного объекта значение этого поля равно 1, для второго 
		созданного объекта значение равно 2 и т. д.
		Для того чтобы создать такое поле, вам необходимо иметь еще одно поле, в которое будет 
		записываться количество созданных объектов класса (это означает, что последнее поле должно 
		относиться не к отдельным объектам класса, а ко всему классу в целом. Вспомните, какое ключевое 
		слово необходимо при описании такого поля.). Каждый раз при создании нового объекта конструктор 
		может получить значение этого поля и в соответствии с ним назначить объекту индивидуальный порядковый номер.
		В класс следует включить метод, который будет выводить на экран порядковый номер объекта. 
		Создайте функцию main(), в которой будут созданы три объекта, и каждый объект выведет на экран свой 
		порядковый номер, например: Мой порядковый номер: 2 и т. п.*/


	}break;
	case 9: {

	}break;
	case 10: {

	}break;
	case 11: {

	}break;
	case 12: {

	}break;
	}
}