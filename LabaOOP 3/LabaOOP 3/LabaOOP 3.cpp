#include <iostream>
#include <iomanip>//for setw()
#include <conio.h>//for getche()

using namespace std;

int main() {
	setlocale(LC_ALL, "Russian");
	int a;
	cout << "Введите номер задания лабораторной работы: ";
	cin >> a;
	switch (a) {
	case 1: {
		/*Номер телефона, например (212) 767—8900, можно условно разделить на три части: 
		код города (212), номер телефонной станции (767) и номер абонента (8900). 
		Напишите программу с использованием структуры, позволяющую раздельно хранить 
		эти три части телефонного номера. Назовите структуру phone. Создайте две структурные переменные типа phone. 
		Инициализацию одной из них произведите сами, а значения для другой запросите с клавиатуры. 
		Затем выведите содержимое обеих переменных на экран. 
		Результат работы программы должен выглядеть приблизительно так:
Введите код города, номер станции и номер абонента:
415 555 1212
Мой номер (212) 767-8900
Ваш номер (415) 555-1212
*/

// uses structure to store phone number

struct phone
   {
   int area;         //area code (3 digits)
   int exchange;     //exchange (3 digits)
   int number;       //number (4 digits)
   };

   phone ph1 = { 212, 767, 8900 };  //initialize phone number
   phone ph2;                       //define phone number
                                    // get phone no from user
   cout << "\nEnter your area code, exchange, and number";
   cout << "\n(Don't use leading zeros): ";
   cin >> ph2.area >> ph2.exchange >> ph2.number;

   cout << "\nMy number is "        //display numbers
	<< '(' << ph1.area << ") "
	<< ph1.exchange << '-' << ph1.number;

   cout << "\nYour number is "
	<< '(' << ph2.area << ") "
	<< ph2.exchange << '-' << ph2.number << endl;

	} break;
	case 2: {
		/*Расположение точки на плоскости можно задать с помощью двух координат: х и у. 
		Например, если точка имеет координаты (4, 5), то это значит, что она отстоит на 4 единицы 
		справа от вертикальной оси и на 5 единиц вверх от горизонтальной оси. 
		Сумма двух точек определяется как точка, имеющая координаты, равные сумме соответствующих координат слагаемых.
Напишите программу, использующую для интерпретации точки на плоскости структуру с названием point. 
Определите три переменные типа point, и две из них инициализируйте с помощью значений, вводимых с клавиатуры. 
Затем присвойте третьей переменной значение суммы первых двух переменных и выведите результат на экран. 
Результат работы программы может выглядеть следующим образом:
Введите координаты точки p1: 3 4 
Введите координаты точки р2: 5 7 
Координаты точки p1+p2 равны 8.11*/

		struct point {
			int po1,po2, sum;
		};

		point x, y;
		cout << "Введите координаты точки p1 (x y): ";
		cin >> x.po1 >> y.po1;
		cout << "Введите координаты точки р2 (x y): ";
		cin >> x.po2 >> y.po2;
		x.sum = x.po1 + x.po2;
		y.sum = y.po1 + y.po2;
		cout << "Координаты точки p1+p2 равны " << x.sum << " " << y.sum << endl;

	} break;
	case 3: {
		/*Создайте структуру с именем Volume, содержащую три поля типа Distance из примера englstrc, 
		для хранения трех измерений помещения. Определите переменную типа Volume, инициализируйте ее, 
		вычислите объем, занимаемый помещением, и выведите результат на экран. 
		Для подсчета объема переведите каждое из значений типа Distance в значение типа float, 
		равное соответствующей длине в футах и хранимое в отдельной переменной. 
		Затем для вычисления объема следует перемножить три полученные вещественные переменные.*/

		struct Distance {
			int feet;
			float inches;
		};

		struct Volume {
			Distance length;
			Distance width;
			Distance height;
		};

		float l, w, h;
		Volume room1 = { { 16, 3.5 }, { 12, 6.25 }, { 8, 1.75 } };

		l = room1.length.feet + room1.length.inches / 12.0;
		w = room1.width.feet + room1.width.inches / 12.0;
		h = room1.height.feet + room1.height.inches / 12.0;

		cout << "Volume = " << l * w * h << " cubic feet\n";

	} break;
	case 4: {
		/*4.Создайте структуру с именем employee, содержащую два поля: 
		номер сотрудника типа int и величину его пособия в долларах типа float. 
		Запросите с клавиатуры данные о трех сотрудниках, сохраните их в трех структурных 
		переменных типа employee и выведите информацию о каждом из сотрудников на экран.*/

		struct employee {
			int number;
			float posDollar;
		};

		employee w1, w2, w3;
		cout << "Введите номер работника и размер его пособия в долларах: ";
		cin >> w1.number >> w1.posDollar;
		cout << "Введите номер работника и размер его пособия в долларах: ";
		cin >> w2.number >> w2.posDollar;
		cout << "Введите номер работника и размер его пособия в долларах: ";
		cin >> w3.number >> w3.posDollar;
		cout << endl << "Информация о сотрудниках\n";
		cout << "Первый сотрудник:\nНомер " << w1.number << "\nРазмер пособия " << w1.posDollar << " долларов" << endl;
		cout << "\nВторой сотрудник:\nНомер " << w2.number << "\nРазмер пособия " << w2.posDollar << " долларов" << endl;
		cout << "\nТретий сотрудник:\nНомер " << w3.number << "\nРазмер пособия " << w3.posDollar << " долларов" << endl;

	} break;
	case 5: {
		/*Создайте структуру типа date, содержащую три поля типа int: месяц, день и год. 
		Попросите пользователя ввести день, месяц и год в формате 31/12/2002, сохраните введенное значение 
		в структурной переменной, а затем извлеките данные из этой переменной и выведите их на экран в том же 
		формате, в каком они вводились.*/

		struct date {
			int mounth, day, year;
		};

		char F;
		date d, m, y;
		cout << "";
		cin >> m.mounth >> F >> d.day >> F >> y.year;
		cout << m.mounth << d.day << y.year << endl;

	} break;
	case 6: {

	} break;
	case 7: {

	} break;
	case 8: {

	} break;
	case 9: {

	} break;
	case 10: {

	} break;
	case 11: {

	} break;
	case 12: {

	} break;
	}

}